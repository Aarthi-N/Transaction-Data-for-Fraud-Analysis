# Write a SQL query to find the percentage of fraudulent amount transacted for each purchase category. 

WITH cte AS( 
     SELECT 
           purchase_category, 
           ROUND(SUM(amount),0) AS total_amount, 
           ROUND(SUM(CASE WHEN is_fraudulent = 1 THEN amount END),0) AS total_fraud_trans 
     FROM [car_db].[dbo].[synthetic_financial_data1]  
     GROUP BY purchase_category 
) 
SELECT  
      purchase_category, 
      ROUND(total_fraud_trans * 100 / total_amount, 0) AS percent_fraud_amount 
FROM cte 
ORDER BY percent_fraud_amount DESC; 

# Write a SQL query to find the top 5 highest amount spent during fraudulent transactions, the total number of transactions, customer age for each card-type. 

WITH cte AS( 
     SELECT  
           card_type, 
           customer_age, 
           COUNT(transaction_id) AS trans_count, 
           ROUND(SUM(amount),0) AS total_amount, 
           DENSE_RANK() OVER(PARTITION BY card_type ORDER BY SUM(amount) DESC) AS rank 
    FROM [car_db].[dbo].[synthetic_financial_data1] 
    WHERE is_fraudulent = 1 
    GROUP BY card_type, customer_age 
) 
SELECT  
      card_type,  
      customer_age, 
      trans_count, 
      total_amount 
FROM cte 
WHERE rank <= 5; 

# Write a SQL query to find the hourly fraudulent transactions for each card_type.

SELECT 
     card_type,
     COUNT(transaction_id) AS trans_count,
     ROUND(ROUND(SUM(CASE WHEN is_fraudulent = 1 THEN amount END),0) * 100 / ROUND(SUM(amount),0), 2) AS fraud_amount_percent
FROM [car_db].[dbo].[synthetic_financial_data1]
GROUP BY card_type, DATEADD(HOUR, DATEDIFF(HOUR, 0, transaction_time), 0);

# Write a SQL query to find the most used card-type for transactions.

SELECT card_type
FROM [car_db].[dbo].[synthetic_financial_data1]
GROUP BY card_type
HAVING COUNT(transaction_id) = (
    SELECT MAX(trans_count)
    FROM (
        SELECT
            card_type,
	    COUNT(transaction_id) AS trans_count
        FROM [car_db].[dbo].[synthetic_financial_data1]
        GROUP BY card_type
    ) AS subquery
);

# Write a SQL query to find the merchant-id having percentage of fraudulent transactions greater than 85 along with their purchase-category.

SELECT 
      merchant_id,
      purchase_category,
      ROUND(SUM(CASE WHEN is_fraudulent = 1 THEN amount END) * 100.0 / NULLIF(SUM(amount), 0), 0) AS fraud_amount_percent
FROM [car_db].[dbo].[synthetic_financial_data1]
GROUP BY merchant_id, purchase_category
HAVING ROUND(SUM(CASE WHEN is_fraudulent = 1 THEN amount END) * 100.0 / NULLIF(SUM(amount), 0), 0) > 85
ORDER BY fraud_amount_percent DESC;
   
-------------------------------------------------------------------------------------------------------------------------------------------------


	  
